#!/bin/sh
echo This script deploys the app via dokku and initializes the gitlab repo for automated continuous integration and deployment.
echo you need a server running Ubuntu 20.04 with your ssh key added to the server
echo you need a DNS A record pointing your domain to your server\'s ip address
echo you need to have a gitlab account ssh access and a personal access token
echo
echo WHAT EZINNIT DOES:
echo checks for ezinnit.config, if it doesn\'t exist, it prompts you for the values and creates an ezinnit.config file
echo uses toptotal to create a .gitignore file in your project directory
echo installs gunicorn in local environment
echo creates a procfile for your app in project directory
echo for django apps: replaces settings.py, creates runtime.txt, collects static, migrates
echo creates a .gitlab-ci.yml \(gitlab pipeline\) file in your project directory
echo creates a requirements.txt file in your project directory
echo creates a new gitlab repository and commits your project to main
echo sets local ENV to DEVELOPMENT
echo gets the runner token for the new repository from gitlab
echo creates ssh keys on remote server
echo downloads and installs dokku on remote server
echo creates dokku app on remote server
echo sets the domain for the dokku app on remote server
echo sets the apps proxy port to 80:5000 on remote server
echo downloads and creates a gitlab runner on remote server
echo registers the gitlab runner on remote server
echo downloads and installs dokku-letsencrypt
echo enables encryption for app with TLS certificate from letsencrypt
echo adds a chron job to automatically renew TLS certificates
echo
echo
echo created by john hewitt and robert carroll for synctivate
echo synctivate custom software
echo https://synctivate.com
echo
echo

app_type="ezinnit"

if [ -f ezinnit.config ]
then
  echo config file found...
  # shellcheck disable=SC2039
  source ezinnit.config

else
  echo no config file found, prompting for variables

  echo enter gitlab username
  read -r username

  echo enter gitlab domain \(\"gitlab.com\" or \"git.mydomain.com\"\)
  read -r gitlab_domain

  echo enter gitlab personal token
  read -r token

  echo app name becomes the name of the gitlab repository and the dokku app
  echo IF DJANGO PROJECT, APP NAME MUST MATCH DJANGO PROJECT NAME
  echo App name must begin with lowercase alphanumeric character, and cannot include uppercase characters, colons, or underscores
  echo enter app name
  read -r appname

  echo new server\'s ip address
  read -r ip

  echo enter domain for new app \(\"mynewapp.mydomain.com\"\)
  read -r domain

  echo enter email for letsencrypt.org
  read -r email

  echo WARNING: if you select an app, ezinnit will write over your procfile, settings.py, main.py etc.
  echo enter app type \(type flask, django, fastApi, or just hit enter to deploy your environment as is\)
  read -r app_type


  echo entered information:
  echo gitlab username: "$username"
  echo gitlab domain: "$gitlab_domain"
  echo gitlab personal token: "$token"
  echo app name: "$appname"
  echo server ip: "$ip"
  echo domain: "$domain"
  echo email: "$email"
  if [ "$app_type" = "ezinnit" ]
  then
    echo app type: deploying environment as is
  else
    echo app type: "$app_type"
  fi
  echo
  echo read -p "that's ezinnit? Check settings and then hit enter to deploy"

  echo "username=$username
gitlab_domain=$gitlab_domain
token=$token
appname=$appname
ip=$ip
domain=$domain
email=$email
app_type=$app_type" >> ezinnit.config
fi

echo creating gitignore from www.toptotal.com/developers/gitignore
echo "function gi() { curl -sL https://www.toptal.com/developers/gitignore/api/\$@ ;}" >> \
~/.bashrc && source ~/.bashrc

echo creating gitignore
gi python,pycharm >> .gitignore

echo installing gunicorn
pip install gunicorn

if [ "$app_type" = "flask" ]
then
  echo creating procfile for flask app
  echo "web: gunicorn app:app" > Procfile

elif [ "$app_type" = "fastApi" ] || [ "$app_type" = "fastAPI" ] || [ "$app_type" = "fastapi" ]
then
echo creating procfile for fastAPI app
  echo installing uvicorn
  pip install uvicorn

  ech0 creating procfile for fastAPI app
  echo "web: gunicorn -k uvicorn.workers.UvicornWorker main:app" > Procfile
  echo overwriting main.py
  echo "from fastapi import FastAPI

app = FastAPI()

# deployment is ezinnit
# www.synctivate.com


@app.get(\"/\")
async def root():
    return {\"message\": \"deployment is ezinnit https//synctivate.com\"}


@app.get(\"/hello/{name}\")
async def say_hello(name: str):
    return {\"message\": f\"Hello {name}! https//synctivate.com\"}
" > main.py
elif [ "$app_type" = "django" ]
then
  echo creating procfile for django app
  echo "web: gunicorn $appname.wsgi" > Procfile
  echo creating runtime.txt
  echo "python-3.8.10" > runtime.txt
  echo writing settings.py
  echo "import os

from django.core.management.utils import get_random_secret_key

\"\"\"
Django settings for $appname project.

Generated by ezinnit from 'django-admin startproject' using Django 4.1.3.
For more information on ezinnit go to https://synctivate.com

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
\"\"\"

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_random_secret_key()

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
if os.getenv('ENV'):
    DEBUG = True
print('DEBUG', DEBUG)

if os.getenv('ENV', False):
    ALLOWED_HOSTS = ['*']
else:
    ALLOWED_HOSTS = ['$domain', '$ip']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = '$appname.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = '$appname.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'
PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))
STATIC_ROOT = os.path.join(PROJECT_ROOT, 'static')

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


" > "$appname"/settings.py
  echo collecting static files
  python3 manage.py collectstatic
  echo making migrations
  python3 manage.py makemigrations
  echo migrating
  python3 manage.py migrate
elif [ "$app_type" = "ezinnit" ]
then
  echo deploying...
fi

echo creating gitlab deployment pipeline
echo "image: dokku/ci-docker-image

stages:
  - deploy

variables:
  GIT_DEPTH: 0

deploy:
  stage: deploy
  only:
    - main
  variables:
    GIT_REMOTE_URL: ssh://dokku@$ip:22/$appname
  script: dokku-deploy
  after_script: [dokku-unlock]" > .gitlab-ci.yml

echo creating requirements.txt
pip freeze > requirements.txt

echo creating new gitlab repository
# initialize git appname
# shellcheck disable=SC2164
git init --initial-branch=main
git push --set-upstream git@$gitlab_domain:$username/$appname.git
git remote add origin git@$gitlab_domain:$username/$appname.git
git add .
git commit -m "Initial commit"
git push -u origin main

echo setting local env to DEVELOPMENT
export ENV=DEVELOPMENT

echo getting gitlab runner token
#https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools
runner_token=$(curl --header "PRIVATE-TOKEN: $token" "https://$gitlab_domain/api/v4/projects/$username%2F$appname" | \
python3 -c "import sys, json; print(json.load(sys.stdin)['runners_token'])")

echo local env finished, accessing remote server
# shellcheck disable=SC1078
# shellcheck disable=SC2217
echo "#! /bin/sh
# shellcheck disable=SC1079
ssh-keygen -t rsa -N \"\" -f /root/.ssh/id_rsa

ssh_key=\`cat /root/.ssh/id_rsa\`
echo ssh key: \$ssh_key

echo adding ssh key to gitlab
curl --request POST --header \"PRIVATE-TOKEN: $token\" \
    \"https://$gitlab_domain/api/v4/projects/$username%2F$appname/variables\" \
    --form \"key=SSH_PRIVATE_KEY\" --form \"value=\$ssh_key\"

echo installing dokku
wget https://raw.githubusercontent.com/dokku/dokku/v0.28.4/bootstrap.sh
sudo DOKKU_TAG=v0.28.4 bash bootstrap.sh
echo adding keys to dokku admin
cat ~/.ssh/authorized_keys | dokku ssh-keys:add admin
echo creating app
dokku apps:create $appname
echo clearing global domains
dokku domains:clear-global
echo setting domain to dokku app
dokku domains:set $appname $domain
echo setting proxy port to 80
dokku proxy:ports-set $appname http:80:5000

echo installing gitlab runner from gitlab-runner-downloads.s3.amazonaws.com
# Download the binary for your system
sudo curl -L --output /usr/local/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64

echo giving gitlab runner permission to execute
# Give it permission to execute
sudo chmod +x /usr/local/bin/gitlab-runner

echo creating a gitlab runner user
# Create a GitLab Runner user
sudo useradd --comment 'GitLab Runner' --create-home gitlab-runner --shell /bin/bash

echo install gitlab runner and run as a service
# Install and run as a service
sudo gitlab-runner install --user=gitlab-runner --working-directory=/home/gitlab-runner
sudo gitlab-runner start

echo registering gitlab runner
sudo gitlab-runner register \
  --non-interactive \
  --url \"https://$gitlab_domain/\" \
  --registration-token \"$runner_token\" \
  --executor \"docker\" \
  --docker-image alpine:latest \
  --description \"docker-runner\" \
  --maintenance-note \"created by ezinnit\" \
  --tag-list \"$appname, $ip, $domain, ezinnit\" \
  --run-untagged=\"true\" \
  --locked=\"false\" \
  --access-level=\"not_protected\"

echo installing letsencrypt from letsencrypt.org
sudo dokku plugin:install https://github.com/dokku/dokku-letsencrypt.git
echo setting letsencrypt email
dokku config:set --no-restart $appname DOKKU_LETSENCRYPT_EMAIL=$email
echo enabling letsencrypt for app
dokku letsencrypt:enable $appname
echo enabling letsencrypt cron job for renewing certificate
dokku letsencrypt:cron-job --add
echo saved as server-script.sh in project directory where ezinnit was run
echo
echo gitlab now deploying https://$gitlab_domain/$username/$appname
echo to https://$domain
echo
echo that\'s ezinnit!
echo https://synctivate.com
" > initialize-server.sh
echo running initialize-server.sh on server
ssh root@"$ip" "bash -s" < initialize-server.sh
