#!/bin/sh
echo This script deploys the app via dokku and initializes the gitlab repo for automated continuous integration and deployment.
echo you need a server running Ubuntu 20.04 with your ssh key added to the server
echo you need a DNS A record pointing your domain to your server\'s ip address
echo you need to have a gitlab account ssh access and a personal access token
echo
echo WHAT EZINNIT DOES:
echo checks for ezinnit.config, if it doesn\'t exist, it prompts you for the values and creates an ezinnit.config file
echo uses toptotal to create a .gitignore file in your project directory
echo installs gunicorn in local environment
echo creates a procfile for your app in project directory
echo for django apps: replaces settings.py, creates runtime.txt, collects static, migrates
echo creates a .gitlab-ci.yml \(gitlab pipeline\) file in your project directory
echo creates a requirements.txt file in your project directory
echo creates a new gitlab repository and commits your project to main
echo gets the runner token for the new repository from gitlab
echo creates ssh keys on remote server
echo downloads and installs dokku on remote server
echo creates dokku app on remote server
echo sets the domain for the dokku app on remote server
echo sets the apps proxy port to 80:5000 on remote server
echo downloads and creates a gitlab runner on remote server
echo registers the gitlab runner on remote server
echo downloads and installs dokku-letsencrypt
echo enables encryption for app with TLS certificate from letsencrypt
echo adds a chron job to automatically renew TLS certificates
echo
echo
echo created by john hewitt and robert carroll for synctivate
echo synctivate custom software
echo https://synctivate.com
echo
echo

app_type="ezinnit"

if [ -f ezinnit.config ]
then
  echo config file found...
  # shellcheck disable=SC2039
  source ezinnit.config

else
  echo no config file found, prompting for variables

  echo enter gitlab username
  read -r username

  echo enter gitlab domain \(\"gitlab.com\" or \"git.mydomain.com\"\)
  read -r gitlab_domain

  echo enter gitlab personal token
  read -r token

  echo app name becomes the name of the gitlab repository and the dokku app
  echo IF DJANGO PROJECT, APP NAME MUST MATCH DJANGO PROJECT NAME
  echo App name must begin with lowercase alphanumeric character, and cannot include uppercase characters, colons, or underscores
  echo enter app name
  read -r appname

  echo new server\'s ip address
  read -r ip

  echo enter domain for new app \(\"mynewapp.mydomain.com\" Create DNS \"A\" record now before continuing for best results.\)
  read -r domain

  echo enter email for letsencrypt.org
  read -r email

  echo WARNING: if you select an app, ezinnit will write over your procfile, settings.py, main.py etc.
  echo enter app type \(type flask, django, fastApi, or just hit enter to deploy your environment as is\)
  read -r app_type


  echo entered information:
  echo gitlab username: "$username"
  echo gitlab domain: "$gitlab_domain"
  echo gitlab personal token: "$token"
  echo app name: "$appname"
  echo server ip: "$ip"
  echo domain: "$domain"
  echo email: "$email"
  if [ "$app_type" = "ezinnit" ]
  then
    echo app type: deploying environment as is
  else
    echo app type: "$app_type"
  fi
  echo
  read -r -p "Check the above settings and then press enter to deploy..."

  echo "username=$username
gitlab_domain=$gitlab_domain
token=$token
appname=$appname
ip=$ip
domain=$domain
email=$email
app_type=$app_type" >> ezinnit.config
fi

echo creating gitignore from www.toptotal.com/developers/gitignore
echo "function gi() { curl -sL https://www.toptal.com/developers/gitignore/api/\$@ ;}" >> \
~/.bashrc && source ~/.bashrc

echo creating gitignore
gi python,pycharm >> .gitignore

echo installing gunicorn
pip install gunicorn

if [ "$app_type" = "flask" ]
then
  echo getting ezinnit flask template script
  wget https://raw.githubusercontent.com/johnsyncs/ezinnit/main/ezinnit%20template%20scripts/flask.ezinnit
  echo running ezinnit flask template script
  bash flask.ezinnit
elif [ "$app_type" = "fastApi" ] || [ "$app_type" = "fastAPI" ] || [ "$app_type" = "fastapi" ]
then
  echo getting ezinnit fastapi template script
  wget https://raw.githubusercontent.com/johnsyncs/ezinnit/main/ezinnit%20template%20scripts/fastapi.ezinnit
  echo running ezinnit fastapi template script
  bash fastapi.ezinnit
elif [ "$app_type" = "django" ]
then
  echo getting django template from ezinnit
  wget https://raw.githubusercontent.com/johnsyncs/ezinnit/main/ezinnit%20template%20scripts/django.ezinnit
  echo running django template script
  bash django.ezinnit
elif [ "$app_type" = "ezinnit" ]
then
  echo deploying...
fi

echo creating gitlab deployment pipeline
echo "image: dokku/ci-docker-image

stages:
  - deploy

variables:
  GIT_DEPTH: 0

deploy:
  stage: deploy
  only:
    - main
  variables:
    GIT_REMOTE_URL: ssh://dokku@$ip:22/$appname
  script: dokku-deploy
  after_script: [dokku-unlock]" > .gitlab-ci.yml

echo creating requirements.txt
pip freeze > requirements.txt

echo creating new gitlab repository
# initialize git appname
# shellcheck disable=SC2164
git init --initial-branch=main
git push --set-upstream git@$gitlab_domain:$username/$appname.git
git remote add origin git@$gitlab_domain:$username/$appname.git
git add .
git commit -m "Initial commit"
git push -u origin main


echo getting gitlab runner token
#https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools
runner_token=$(curl --header "PRIVATE-TOKEN: $token" "https://$gitlab_domain/api/v4/projects/$username%2F$appname" | \
python3 -c "import sys, json; print(json.load(sys.stdin)['runners_token'])")

echo getting ezinnit script for server
wget https://raw.githubusercontent.com/johnsyncs/ezinnit/main/ezinnit%20deployment%20scripts/initialize-server.sh

ech creating create_config file for server
echo "
echo \"
username=$username
gitlab_domain=$gitlab_domain
token=$token
appname=$appname
ip=$ip
domain=$domain
email=$email
app_type=$app_type
runner_token=$runner_token\" >> ezinnit.config" >> create_config.sh

echo running create_config on server
ssh root@"$ip" "bash -s" < create_config.sh
echo running initialize-server.sh on server
ssh root@"$ip" "bash -s" < initialize-server.sh
