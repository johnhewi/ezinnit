#!/bin/sh
source ezinnit/ezinnit.config
echo installing gunicorn
pip3 install gunicorn
[ -d /templates ] \
&& echo "templates directory exists" \
|| echo "creating templates folder..." \
&& mkdir templates
echo creating procfile for django app
echo "web: gunicorn $appname.wsgi" > Procfile
echo creating runtime.txt
echo "python-3.8.10" > runtime.txt
echo writing settings.py
echo "import os
from django.core.management.utils import get_random_secret_key

\"\"\"
Django settings for $appname project.

ezinnit helped build this settings.py file
Synctivate Custom Software
https://synctivate.com
John Hewitt
https://github.com/johnhewi

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
\"\"\"

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_random_secret_key()

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
if os.getenv('ENV') == 'DEVELOPMENT':
    print('DEVELOPMENT ENVIRONMENT (Environment variable ENV set to DEVELOPMENT)')
    DEBUG = True
    print('WARNING! DEBUG Mode is on! If you know you are running in a safe, local environment, ignore the warning, '
          'but know that DEBUG=True')
else:
    print('PRODUCTION ENVIRONMENT (Environment variable ENV not set to DEVELOPMENT)')

if DEBUG:
    ALLOWED_HOSTS = ['*']
else:
    ALLOWED_HOSTS = ['$domain', '$ip']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = '$appname.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = '$appname.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'
PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))
STATIC_ROOT = os.path.join(PROJECT_ROOT, 'static')

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


" > "$appname"/settings.py

echo writing views.py
echo "import os
from django.shortcuts import render
def home_page(request):
    context = {'ENV': os.getenv('ENV')}
    return render(request, 'home.html', context)" > $appname/views.py

echo writing templates/home.html
echo "<html lang=\"en\">
<head id=\"header\">
   <link rel=\"icon\" sizes=\"192x192\" href=\"https://static.wixstatic.com/media/cfcada_41bcde5a123641a195538447b161ca9a%7Emv2.png/v1/fill/w_32%2Ch_32%2Clg_1%2Cusm_0.66_1.00_0.01/cfcada_41bcde5a123641a195538447b161ca9a%7Emv2.png\">
   <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@900&family=Josefin+Sans:wght@600&family=Oswald&family=Playfair+Display&display=swap\" rel=\"stylesheet\">
</head>
   <title> $appname </title>
<body id=\"body\" class=\"body\" align=\"center\" onload=\"build_list()\" style=\"background-color:#6b9adb;\">
<div class=\"maincolumn\">
   <div class = \"box\">
   <div style=\"margin:20px; color: #0F386A; font-family: 'Playfair Display', serif; font-weight: bolder; font-size: 80px;\"> $appname. </div>
       {% if ENV == \"DEVELOPMENT\" %}
       <div style=\"margin:20px; color: #FF423E; font-family: 'Playfair Display', serif; font-weight: bolder; font-size: 80px;\"> DEBUG MODE </div>
       {% endif %}
       <div class=\"content\">Deployed with a little help from <a href=\"https://github.com/johnsyncs/ezinnit\">ezinnit</div>
       <div class=\"content\"> <br><a href=\"https://synctivate.com\"><img src=\"https://static.wixstatic.com/media/a6cc10_c03f7d758f454fc19bf82dfccf6fd647~mv2.png/v1/fill/w_221,h_57,al_c,q_85,usm_0.66_1.00_0.01,enc_auto/translogo.png\"></a></div>
   </div>
</div>
</div>
</body>
<style>
   .content{
       font-family: 'Playfair Display', serif;
       margin: 50px;
   }
   .body{
       font-family: 'Playfair Display', serif;
       background-image: linear-gradient(#3C9E90, #3A5A98);
       height: 100%;
   }
  .maincolumn{
       display: flex;
       flex-direction: column;
       justify-content: center;
       height: 100%;
   }
   .box{
       align-self: center;
       background-color: white;
       width: 90%;
       max-width: 1200px;
       border-radius: 25px;
       opacity: 92%;
       font-family: 'Playfair Display', serif;
       font-size: 45px;
   }
</style>
</html>
" > templates/home.html

echo writing urls.py
echo "\"\"\"$appname URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/4.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
\"\"\"
from django.contrib import admin
from django.urls import path

from $appname.views import home_page

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', home_page),
]" > "$appname"/urls.py
echo "#!/bin/sh
echo finding a port...
openportfound=false
portcheck=8000
while [ \$openportfound = false ] && [ \$portcheck -lt 65537 ]
do
    if [ \$portcheck == 65537 ]
    then
        portcheck=1025
    fi

    stringlength=\$(lsof -Pi :\"\$portcheck\" -sTCP:LISTEN)

    if [ \${#stringlength} = 0 ]
    then
        openportfound=true
        openport=\$portcheck
        echo found open port: \$openport
    else
        if [ \$portcheck == 7999 ]
            then
                echo \"no open ports found\"
                openport=8000
                break
            fi
        portcheck=\$((portcheck+1))
    fi
done
if [ \$openportfound = true ]
then
    echo starting app \in local dev environment on port \$openport...
    source venv/bin/activate && export ENV=DEVELOPMENT && python manage.py runserver \$openport
else
    echo starting app \in local dev environment \in debug mode...
    source venv/bin/activate && export ENV=DEVELOPMENT && python manage.py runserver
fi" > ezrun
echo collecting static files
python3 manage.py collectstatic
echo making migrations
python3 manage.py makemigrations
echo migrating
python3 manage.py migrate
